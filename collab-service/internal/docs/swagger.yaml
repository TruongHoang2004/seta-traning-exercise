basePath: /api
definitions:
  dto.AddManagerToTeamInput:
    properties:
      userId:
        type: string
    required:
    - userId
    type: object
  dto.AddMemberToTeamInput:
    properties:
      userId:
        type: string
    required:
    - userId
    type: object
  dto.CreateNoteDTO:
    properties:
      body:
        type: string
      folder_id:
        type: string
      title:
        type: string
    required:
    - folder_id
    - title
    type: object
  dto.CreateTeamInput:
    properties:
      managers:
        items:
          $ref: '#/definitions/dto.ManagerInput'
        type: array
      members:
        items:
          $ref: '#/definitions/dto.MemberInput'
        type: array
      teamName:
        type: string
    required:
    - teamName
    type: object
  dto.FolderDTO:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.ImportUserResult:
    properties:
      line:
        type: integer
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.ImportUserSummary:
    properties:
      failed:
        type: integer
      results:
        items:
          $ref: '#/definitions/dto.ImportUserResult'
        type: array
      success:
        type: integer
      total:
        type: integer
    type: object
  dto.ManagerInput:
    properties:
      managerId:
        type: string
    required:
    - managerId
    type: object
  dto.MemberInput:
    properties:
      memberId:
        type: string
    required:
    - memberId
    type: object
  dto.ShareDTO:
    properties:
      accessRole:
        $ref: '#/definitions/models.AccessRole'
      userId:
        type: string
    required:
    - accessRole
    - userId
    type: object
  dto.UpdateNoteDTO:
    properties:
      body:
        type: string
      folder_id:
        type: string
      title:
        type: string
    type: object
  models.AccessRole:
    enum:
    - READ
    - WRITE
    type: string
    x-enum-varnames:
    - AccessLevelRead
    - AccessLevelWrite
  models.Folder:
    properties:
      id:
        type: string
      name:
        type: string
      notes:
        items:
          $ref: '#/definitions/models.Note'
        type: array
      ownerID:
        type: string
    type: object
  models.Note:
    properties:
      body:
        type: string
      folder:
        $ref: '#/definitions/models.Folder'
      folderID:
        type: string
      id:
        type: string
      ownerID:
        type: string
      title:
        type: string
    type: object
  models.Roster:
    properties:
      id:
        type: string
      isLeader:
        type: boolean
      team:
        $ref: '#/definitions/models.Team'
      teamID:
        type: string
      userID:
        type: string
    type: object
  models.Team:
    properties:
      id:
        type: string
      rosters:
        items:
          $ref: '#/definitions/models.Roster'
        type: array
      teamName:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for managing teams, folders, notes, and sharing.
  title: Collab Service API
  version: "1.0"
paths:
  /folders:
    get:
      description: Retrieve all folders owned by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of folders
          schema:
            items:
              $ref: '#/definitions/models.Folder'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get all folders
      tags:
      - folders
    post:
      consumes:
      - application/json
      description: Create a new folder for the authenticated user
      parameters:
      - description: Folder data
        in: body
        name: folder
        required: true
        schema:
          $ref: '#/definitions/dto.FolderDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created folder
          schema:
            $ref: '#/definitions/models.Folder'
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create a new folder
      tags:
      - folders
  /folders/{folderId}:
    delete:
      description: Delete a folder and all its notes
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Folder not found
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete folder
      tags:
      - folders
    get:
      description: Retrieve details of a specific folder
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Folder details
          schema:
            $ref: '#/definitions/models.Folder'
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Folder not found
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get folder details
      tags:
      - folders
    put:
      consumes:
      - application/json
      description: Update a folder's name
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: Updated folder data
        in: body
        name: folder
        required: true
        schema:
          $ref: '#/definitions/dto.FolderDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Updated folder
          schema:
            $ref: '#/definitions/models.Folder'
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Folder not found
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Update folder
      tags:
      - folders
  /folders/{folderId}/share:
    post:
      consumes:
      - application/json
      description: Share a folder with another user with read or write access
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: User ID and permission
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ShareDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Success response with message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Error response
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Share folder with user
      tags:
      - folders
  /folders/{folderId}/share/{userId}:
    delete:
      description: Remove a user's access to a shared folder
      parameters:
      - description: Folder ID
        in: path
        name: folderId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success response with message
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Error response
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Revoke shared folder access
      tags:
      - folders
  /import-users:
    post:
      consumes:
      - multipart/form-data
      description: Import users concurrently using GraphQL mutation and worker pool
      parameters:
      - description: CSV file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ImportUserSummary'
        "400":
          description: Bad request
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Import users from CSV
      tags:
      - users
  /notes:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: List of notes
          schema:
            items:
              $ref: '#/definitions/models.Note'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get all notes
      tags:
      - notes
    post:
      consumes:
      - application/json
      description: Create a new note in a folder
      parameters:
      - description: Note data
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/dto.CreateNoteDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created note
          schema:
            $ref: '#/definitions/models.Note'
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create a new note
      tags:
      - notes
  /notes/{noteId}:
    delete:
      parameters:
      - description: Note ID
        in: path
        name: noteId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete a note
      tags:
      - notes
    get:
      parameters:
      - description: Note ID
        in: path
        name: noteId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Note'
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get a note
      tags:
      - notes
    put:
      consumes:
      - application/json
      parameters:
      - description: Note ID
        in: path
        name: noteId
        required: true
        type: string
      - description: Updated note
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateNoteDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Note'
        "400":
          description: Bad Request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Not Found
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Update a note
      tags:
      - notes
  /notes/{noteId}/share:
    post:
      consumes:
      - application/json
      description: Share a single note with read or write access
      parameters:
      - description: Note ID
        in: path
        name: noteId
        required: true
        type: string
      - description: User ID and permission
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ShareDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Success response with message
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Error response
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Share a note with another user
      tags:
      - notes
  /notes/{noteId}/share/{userId}:
    delete:
      description: Remove a user's access to a shared note
      parameters:
      - description: Note ID
        in: path
        name: noteId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success response with message
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Error response
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Revoke note sharing
      tags:
      - notes
  /teams:
    post:
      consumes:
      - application/json
      description: Create a new team with managers and members
      parameters:
      - description: Team data with managers and members
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTeamInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created team with roster
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Create a new team
      tags:
      - teams
  /teams/{teamId}:
    get:
      description: Get team details by ID
      parameters:
      - description: Team ID (UUID)
        in: path
        name: teamId
        required: true
        type: string
      responses:
        "200":
          description: Team details
          schema:
            $ref: '#/definitions/models.Team'
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Team not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Get team by ID
      tags:
      - teams
  /teams/{teamId}/assets:
    get:
      description: 'Manager-only API: View all assets that team members own or can
        access (shared folders or notes)'
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success response with owned and shared folders
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Error response
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all accessible assets of team members
      tags:
      - assets
  /teams/{teamId}/managers:
    post:
      consumes:
      - application/json
      description: Add a user as a manager to a team
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Manager data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.AddManagerToTeamInput'
      produces:
      - application/json
      responses:
        "201":
          description: Success message
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add manager to team
      tags:
      - teams
  /teams/{teamId}/managers/{managerId}:
    delete:
      description: Remove a manager from a team
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Manager ID
        in: path
        name: managerId
        required: true
        type: integer
      responses:
        "200":
          description: Success message
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Remove manager from team
      tags:
      - teams
  /teams/{teamId}/members:
    post:
      consumes:
      - application/json
      description: Add a user as a member to a team
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Member data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.AddMemberToTeamInput'
      produces:
      - application/json
      responses:
        "201":
          description: Success message
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Add member to team
      tags:
      - teams
  /teams/{teamId}/members/{memberId}:
    delete:
      description: Remove a member from a team
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Member ID
        in: path
        name: memberId
        required: true
        type: integer
      responses:
        "200":
          description: Success message
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Remove member from team
      tags:
      - teams
  /users/{userId}/assets:
    get:
      description: Get all folders owned or shared with a specific user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success response with owned and shared folders
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Error response
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Error response
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all assets of a user
      tags:
      - assets
securityDefinitions:
  BearerAuth:
    description: 'Enter JWT token like: Bearer <your-token>'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
