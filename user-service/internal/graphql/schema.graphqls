scalar DateTime

enum UserType {
  MANAGER
  MEMBER
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String
  errors: [String]
}

interface QueryRespone {
  code: String!
  success: Boolean!
  message: String!
  errors: [String]
}

input UserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  role: UserType!
}

type User {
  userId: ID!
  username: String!
  email: String!
  role: UserType!
  createdAt: DateTime
}

type Member {
  memberId: ID!
  memberName: String!
}

type Manager {
  managerId: ID!
  managerName: String!
}

type UserQueryResponse implements QueryRespone {
  code: String!
  success: Boolean!
  message: String!
  errors: [String]
  user: User
}

type UsersQueryRespone implements QueryRespone {
  code: String!
  success: Boolean!
  message: String!
  errors: [String]
  users: [User]
}

type UserMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String
  errors: [String]
  user: User
}

type AuthMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  errors: [String]
  accessToken: String
  refreshToken: String
  user: User
}

type Query {
  users(role: UserType, userIds: [ID!]): UsersQueryRespone
  user(userId: ID!): UserQueryResponse
  parseToken(accessToken: String!): UserQueryResponse
  ping: QueryRespone
}

type Mutation {
  createUser(input: CreateUserInput!): UserMutationResponse!
  updateUser(
    userId: ID!
    username: String!
    email: String!
  ): UserMutationResponse!
  login(input: UserInput!): AuthMutationResponse!
  renewToken(refreshToken: String!): AuthMutationResponse!
  assignRole(userId: ID!, role: UserType!): UserMutationResponse!
}
