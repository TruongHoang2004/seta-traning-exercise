services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: truonghoang2004
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  user-service:
    build:
      context: ./user-service
    container_name: user-service
    environment:
      PORT: 4000
      GO_ENV: production
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: truonghoang2004
      DB_NAME: user_service
      DB_PORT: 5432
      JWT_ACCESS_SECRET: seta
      JWT_ACCESS_EXPIRATION: 15m
      JWT_REFRESH_SECRET: seta
      JWT_REFRESH_EXPIRATION: 7d
      LOG_FILE_PATH: ./logs/user_service.log
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./user-service/logs:/app/logs
    ports:
      - "4000:4000"

  collab-service:
    build:
      context: ./collab-service
    container_name: collab-service
    environment:
      PORT: 8080
      GO_ENV: production
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: truonghoang2004
      DB_NAME: collab_service
      DB_PORT: 5432
      USER_SERVICE_ENDPOINT: http://user-service:4000/query
      LOG_FILE_PATH: ./logs/server.log
      REDIS_ADDRESS: redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      user-service:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - ./collab-service/logs:/app/logs
    ports:
      - "8080:8080"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0 
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"      # truy cập từ host
      - "29092:29092"    # truy cập từ host (nếu muốn)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      ALLOW_PLAINTEXT_LISTENER: "yes"

volumes:
  pgdata:
  redis_data:
