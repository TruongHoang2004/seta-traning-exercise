package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"seta-training-exercise-1/database"
	"seta-training-exercise-1/graph/generated"
	"seta-training-exercise-1/graph/model"
	"seta-training-exercise-1/models"
	"seta-training-exercise-1/utils"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.UserMutationResponse, error) {
	email := input.Email
	username := input.Username
	password, err := utils.HashPassword(input.Password)

	if err != nil {
		return nil, err
	}

	user := &models.User{
		Username:     username,
		Email:        email,
		PasswordHash: password,
		Role:         models.UserRole(input.Role),
	}

	// Check if email already exists
	var existingUser models.User
	if err := database.DB.Where("email = ?", email).First(&existingUser).Error; err == nil {
		return nil, fmt.Errorf("email already in use")
	}

	// Create user in database
	if err := database.DB.Create(user).Error; err != nil {
		return nil, err
	}

	return &model.UserMutationResponse{
		User: &model.User{
			UserID:   user.ID,
			Username: user.Username,
			Email:    user.Email,
			Role:     model.UserType(user.Role),
		},
	}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, userID string, username string, email string) (*model.UserMutationResponse, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.UserInput) (*model.AuthMutationResponse, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RenewToken is the resolver for the renewToken field.
func (r *mutationResolver) RenewToken(ctx context.Context, userID string) (*model.AuthMutationResponse, error) {
	panic(fmt.Errorf("not implemented: RenewToken - renewToken"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, role model.UserType) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, userID string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Teams is the resolver for the teams field.
func (r *queryResolver) Teams(ctx context.Context, userID string) ([]*model.Team, error) {
	panic(fmt.Errorf("not implemented: Teams - teams"))
}

// Team is the resolver for the team field.
func (r *queryResolver) Team(ctx context.Context, teamID string) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: Team - team"))
}

// MyTeams is the resolver for the myTeams field.
func (r *queryResolver) MyTeams(ctx context.Context, userID string) ([]*model.Team, error) {
	panic(fmt.Errorf("not implemented: MyTeams - myTeams"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
